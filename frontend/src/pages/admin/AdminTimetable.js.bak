import React, { useState, useEffect } from 'react';
import {
  Typography,
  Paper,
  Box,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Grid,
  IconButton,
  Snackbar,
  Alert,
  CircularProgress,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Tabs,
  Tab
} from '@mui/material';
import { 
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Schedule as ScheduleIcon
} from '@mui/icons-material';
import CalendarSchedule from '../../components/CalendarSchedule';

import { 
  fetchCours, 
  createCour, 
  updateCour, 
  deleteCour,
  fetchClasses,
  fetchProfesseurs,
  fetchMatieres
} from '../../utils/api';

// Fonctions pour gérer les données dans localStorage
const loadProfesseursFromLocalStorage = () => {
  try {
    // Utiliser la même clé que dans AdminProfessors.js
    const savedProfesseurs = localStorage.getItem('schoolAppProfesseurs');
    if (savedProfesseurs) {
      console.log('Professeurs chargés depuis localStorage pour l\'emploi du temps');
      return JSON.parse(savedProfesseurs);
    }
    return null;
  } catch (error) {
    console.error('Erreur lors du chargement des professeurs depuis localStorage:', error);
    return null;
  }
};

const loadMatieresFromLocalStorage = () => {
  try {
    // Utiliser la même clé que dans AdminSubjects.js
    const savedMatieres = localStorage.getItem('schoolAppMatieres');
    if (savedMatieres) {
      console.log('Matières chargées depuis localStorage pour l\'emploi du temps');
      return JSON.parse(savedMatieres);
    }
    return null;
  } catch (error) {
    console.error('Erreur lors du chargement des matières depuis localStorage:', error);
    return null;
  }
};

const saveCoursToLocalStorage = (cours) => {
  try {
    localStorage.setItem('saved_courses', JSON.stringify(cours));
    console.log('Cours sauvegardés dans localStorage');
    return true;
  } catch (error) {
    console.error('Erreur lors de la sauvegarde des cours dans localStorage:', error);
    return false;
  }
};

// Jours de la semaine pour l'emploi du temps
const JOURS = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];

// Heures de la journée (8h à 18h)
const HEURES = Array.from({ length: 11 }, (_, i) => ({
  label: `${i + 8}:00`,
  value: `${(i + 8).toString().padStart(2, '0')}:00:00`
}));

const AdminTimetable = () => {
  const [cours, setCours] = useState([]);
  const [classes, setClasses] = useState([]);
  const [professeurs, setProfesseurs] = useState([]);
  const [matieres, setMatieres] = useState([]);
  const [loading, setLoading] = useState(true);
  const [openForm, setOpenForm] = useState(false);
  const [formType, setFormType] = useState('add');
  const [currentCours, setCurrentCours] = useState(null);
  const [selectedTab, setSelectedTab] = useState(0);
  const [viewMode, setViewMode] = useState('classe'); // 'classe' ou 'professeur'
  const [selectedEntity, setSelectedEntity] = useState('');
  const [forceUpdate, setForceUpdate] = useState(0); // Pour forcer le rafraîchissement du calendrier

  // État du formulaire
  const [formData, setFormData] = useState({
    matiere: '',
    professeur: '',
    classe: '',
    jour: 'Lundi',
    heure_debut: '08:00:00',
    heure_fin: '09:00:00',
    salle: '',
    description: ''
  });

  const [openConfirm, setOpenConfirm] = useState(false);
  const [coursToDelete, setCoursToDelete] = useState(null);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success'
  });
  const [formErrors, setFormErrors] = useState({});
  const [submitting, setSubmitting] = useState(false);

  // Charger les données initiales au démarrage
  useEffect(() => {
    // Restaurer l'entité sélectionnée et le mode de vue depuis localStorage
    try {
      const savedEntity = localStorage.getItem('selected_entity');
      const savedViewMode = localStorage.getItem('view_mode');
      
      if (savedViewMode) {
        console.log('Mode de vue restauré depuis localStorage:', savedViewMode);
        setViewMode(savedViewMode);
      }
      
      if (savedEntity) {
        console.log('Entité sélectionnée restaurée depuis localStorage:', savedEntity);
        setSelectedEntity(savedEntity);
      }
    } catch (e) {
      console.error('Erreur lors de la restauration des préférences:', e);
    }
    
    loadData();
  }, []);
  
  // Réagir aux changements forcés (ajout/modification/suppression de cours)
  useEffect(() => {
    if (forceUpdate > 0) {
      console.log(`ForceUpdate déclenché (${forceUpdate}) - Rafraîchissement des données`);
      loadData();
    }
  }, [forceUpdate]);
  
  // Réagir aux changements d'entité sélectionnée
  useEffect(() => {
    if (selectedEntity) {
      console.log(`Entité sélectionnée changée: ${selectedEntity}`);
      // Sauvegarder l'entité sélectionnée dans localStorage
      try {
        localStorage.setItem('selected_entity', selectedEntity);
        localStorage.setItem('view_mode', viewMode);
      } catch (e) {
        console.error('Erreur lors de la sauvegarde de l\'entité sélectionnée:', e);
      }
    }
  }, [selectedEntity, viewMode]);

  const loadData = async () => {
    setLoading(true);
    try {
      console.log('Chargement des données...');
      
      // 1. Charger d'abord les données depuis localStorage (approche hybride)
      
      // 1.1 Classes depuis localStorage
      let localClasses = null;
      try {
        const storedClasses = localStorage.getItem('schoolAppClasses');
        if (storedClasses) {
          const parsedClasses = JSON.parse(storedClasses);
          if (Array.isArray(parsedClasses) && parsedClasses.length > 0) {
            console.log('Classes chargées depuis localStorage pour l\'emploi du temps');
            localClasses = parsedClasses;
            setClasses(parsedClasses);
          }
        }
      } catch (err) {
        console.error('Erreur lors du parsing des classes depuis localStorage:', err);
      }
      
      // 1.2 Professeurs depuis localStorage
      let localProfesseurs = null;
      try {
        const storedProfesseurs = localStorage.getItem('schoolAppProfesseurs');
        if (storedProfesseurs) {
          const parsedProfesseurs = JSON.parse(storedProfesseurs);
          if (Array.isArray(parsedProfesseurs) && parsedProfesseurs.length > 0) {
            console.log('Professeurs chargés depuis localStorage pour l\'emploi du temps');
            localProfesseurs = parsedProfesseurs;
            setProfesseurs(parsedProfesseurs);
          }
        }
      } catch (err) {
        console.error('Erreur lors du parsing des professeurs depuis localStorage:', err);
      }
      
      // 1.3 Matières depuis localStorage
      let localMatieres = null;
      try {
        const storedMatieres = localStorage.getItem('schoolAppMatieres');
        if (storedMatieres) {
          const parsedMatieres = JSON.parse(storedMatieres);
          if (Array.isArray(parsedMatieres) && parsedMatieres.length > 0) {
            console.log('Matières chargées depuis localStorage pour l\'emploi du temps');
            localMatieres = parsedMatieres;
            setMatieres(parsedMatieres);
          }
        }
      } catch (err) {
        console.error('Erreur lors du parsing des matières depuis localStorage:', err);
      }
      
      // 1.4 Cours depuis localStorage
      let localCours = null;
      try {
        const savedCourses = localStorage.getItem('saved_courses');
        if (savedCourses) {
          const parsedCourses = JSON.parse(savedCourses);
          if (Array.isArray(parsedCourses) && parsedCourses.length > 0) {
            console.log('Cours chargés depuis localStorage pour l\'emploi du temps');
            localCours = parsedCourses;
            
            // Enrichir les cours avec les noms des matières, professeurs et classes depuis localStorage
            if (localMatieres && localProfesseurs && localClasses) {
              const enrichedCourses = parsedCourses.map(cours => {
                const matiere = localMatieres.find(m => m.id === cours.matiere);
                const professeur = localProfesseurs.find(p => p.id === cours.professeur);
                const classe = localClasses.find(c => c.id === cours.classe);
                
                return {
                  ...cours,
                  matiere_nom: matiere ? matiere.nom : 'Matière inconnue',
                  professeur_nom: professeur ? `${professeur.prenom} ${professeur.nom}` : 'Professeur inconnu',
                  classe_nom: classe ? classe.nom : 'Classe inconnue'
                };
              });
              
              setCours(enrichedCourses);
              localStorage.setItem('saved_courses', JSON.stringify(enrichedCourses));
            } else {
              setCours(parsedCourses);
            }
          }
        }
      } catch (err) {
        console.error('Erreur lors du parsing des cours depuis localStorage:', err);
      }
      
      // 2. Définir des données statiques comme fallback
      const staticClasses = [
        { id: 1, nom: 'Terminale S', niveau: 'Terminale', annee_scolaire: '2024-2025', nb_etudiants: 25 },
        { id: 2, nom: 'Première ES', niveau: 'Première', annee_scolaire: '2024-2025', nb_etudiants: 22 },
        { id: 3, nom: 'Seconde A', niveau: 'Seconde', annee_scolaire: '2024-2025', nb_etudiants: 30 }
      ];

      const staticProfesseurs = [
        { id: 1, nom: 'Dupont', prenom: 'Jean', email: 'jean.dupont@example.com', specialite: 'Mathématiques' },
        { id: 2, nom: 'Martin', prenom: 'Sophie', email: 'sophie.martin@example.com', specialite: 'Français' },
        { id: 3, nom: 'Bernard', prenom: 'Michel', email: 'michel.bernard@example.com', specialite: 'Histoire-Géographie' },
        { id: 4, nom: 'Petit', prenom: 'Anne', email: 'anne.petit@example.com', specialite: 'Anglais' },
        { id: 5, nom: 'Robert', prenom: 'Pierre', email: 'pierre.robert@example.com', specialite: 'Physique-Chimie' }
      ];

      const staticMatieres = [
        { id: 1, nom: 'Mathématiques', code: 'MATH101', coefficient: 5 },
        { id: 2, nom: 'Physique-Chimie', code: 'PHY101', coefficient: 4 },
        { id: 3, nom: 'Histoire-Géographie', code: 'HIST101', coefficient: 3 },
        { id: 4, nom: 'Français', code: 'FRAN101', coefficient: 4 },
        { id: 5, nom: 'Anglais', code: 'ANG101', coefficient: 3 }
      ];
      
      const staticCours = [
        { 
          id: 1, 
          matiere: 1, 
          matiere_nom: 'Mathématiques',
          professeur: 1, 
          professeur_nom: 'Jean Dupont',
          classe: 1, 
          classe_nom: 'Terminale S',
          jour: 'Lundi', 
          heure_debut: '08:00:00', 
          heure_fin: '09:00:00', 
          salle: 'A101', 
          description: 'Cours de mathématiques' 
        },
        { 
          id: 2, 
          matiere: 2, 
          matiere_nom: 'Physique-Chimie',
          professeur: 5, 
          professeur_nom: 'Pierre Robert',
          classe: 1, 
          classe_nom: 'Terminale S',
          jour: 'Mardi', 
          heure_debut: '10:00:00', 
          heure_fin: '11:00:00', 
          salle: 'B202', 
          description: 'Cours de physique' 
        },
        { 
          id: 3, 
          matiere: 3, 
          matiere_nom: 'Histoire-Géographie',
          professeur: 3, 
          professeur_nom: 'Michel Bernard',
          classe: 2, 
          classe_nom: 'Première ES',
          jour: 'Mercredi', 
          heure_debut: '14:00:00', 
          heure_fin: '15:00:00', 
          salle: 'C303', 
          description: 'Cours d\'histoire' 
        }
      ];
      
      // 3. Essayer de charger les données depuis l'API (en arrière-plan)
      try {
        const [coursResponse, classesResponse, professeursResponse, matieresResponse] = await Promise.all([
          fetchCours(),
          fetchClasses(),
          fetchProfesseurs(),
          fetchMatieres()
        ]);

        console.log('Réponses des API reçues');
        
        // 3.1 Mettre à jour les classes si disponibles depuis l'API
        if (Array.isArray(classesResponse.data) && classesResponse.data.length > 0) {
          console.log('Classes récupérées depuis l\'API');
          setClasses(classesResponse.data);
          localStorage.setItem('schoolAppClasses', JSON.stringify(classesResponse.data));
          localClasses = classesResponse.data;
        } else if (!localClasses) {
          // Utiliser les données statiques comme fallback
          setClasses(staticClasses);
          localStorage.setItem('schoolAppClasses', JSON.stringify(staticClasses));
    }
  }
  
  const loadData = async () => {
    setLoading(true);
    try {
    // Charger les cours depuis localStorage en priorité
    const localCours = localStorage.getItem('saved_courses');
    if (localCours) {
      try {
        const parsedCours = JSON.parse(localCours);
        if (Array.isArray(parsedCours)) {
          console.log('Utilisation des cours depuis localStorage');
          setCours(parsedCours);
        } else {
          console.log('Les cours dans localStorage ne sont pas dans un format valide');
          setCours(staticCours);
          localStorage.setItem('saved_courses', JSON.stringify(staticCours));
        }
      } catch (parseError) {
        console.error('Erreur lors du parsing des cours depuis localStorage:', parseError);
        setCours(staticCours);
        localStorage.setItem('saved_courses', JSON.stringify(staticCours));
      }
    } else {
      console.log('Aucun cours trouvé dans localStorage, utilisation des données statiques');
      setCours(staticCours);
      localStorage.setItem('saved_courses', JSON.stringify(staticCours));
    }
    
    // Tenter de récupérer les données depuis l'API
    try {
      const [classesResponse, professeursResponse, matieresResponse] = await Promise.allSettled([
        fetchClasses(),
        fetchProfesseurs(),
        fetchMatieres()
      ]);
      
      // Vérifier si les requêtes ont réussi
      console.log('Résultats API:', { 
        classes: classesResponse, 
        professeurs: professeursResponse, 
        matieres: matieresResponse 
      });
      
      // Charger les classes depuis l'API ou utiliser les données statiques
      if (classesResponse.status === 'fulfilled' && Array.isArray(classesResponse.value.data)) {
        console.log('Classes chargées depuis l\'API');
        setClasses(classesResponse.value.data);
      } else {
        console.log('Utilisation des classes statiques');
        setClasses(staticClasses);
        localStorage.setItem('schoolAppClasses', JSON.stringify(staticClasses));
      }
      
      // Charger les professeurs depuis localStorage en priorité
      const localProfesseurs = loadProfesseursFromLocalStorage();
      if (localProfesseurs && localProfesseurs.length > 0) {
        console.log('Professeurs chargés depuis localStorage');
        setProfesseurs(localProfesseurs);
      } else if (professeursResponse.status === 'fulfilled' && Array.isArray(professeursResponse.value.data)) {
        console.log('Professeurs chargés depuis l\'API');
        setProfesseurs(professeursResponse.value.data);
        localStorage.setItem('schoolAppProfesseurs', JSON.stringify(professeursResponse.value.data));
      } else {
        console.log('Utilisation des professeurs statiques');
        setProfesseurs(staticProfesseurs);
        localStorage.setItem('schoolAppProfesseurs', JSON.stringify(staticProfesseurs));
      }
      
      // Charger les matières depuis localStorage en priorité
      const localMatieres = loadMatieresFromLocalStorage();
      if (localMatieres && localMatieres.length > 0) {
        console.log('Matières chargées depuis localStorage');
        setMatieres(localMatieres);
      } else if (matieresResponse.status === 'fulfilled' && Array.isArray(matieresResponse.value.data)) {
        console.log('Matières chargées depuis l\'API');
        setMatieres(matieresResponse.value.data);
        localStorage.setItem('schoolAppMatieres', JSON.stringify(matieresResponse.value.data));
      } else {
        console.log('Utilisation des matières statiques');
        setMatieres(staticMatieres);
        localStorage.setItem('schoolAppMatieres', JSON.stringify(matieresResponse.value.data));
      }
    } catch (apiError) {
      console.error('Erreur lors de la récupération des données depuis l\'API:', apiError);
      console.log('Utilisation des données statiques suite à l\'erreur');
      setClasses(staticClasses);
      setProfesseurs(staticProfesseurs);
      setMatieres(staticMatieres);
      localStorage.setItem('schoolAppClasses', JSON.stringify(staticClasses));
      localStorage.setItem('schoolAppProfesseurs', JSON.stringify(staticProfesseurs));
      localStorage.setItem('schoolAppMatieres', JSON.stringify(staticMatieres));
    }
  const handleOpenForm = (type, cours = null) => {
    // Type est 'add' pour ajout ou 'edit' pour modification
    console.log(`Ouverture du formulaire en mode: ${type}`);
    setFormType(type);
    setFormErrors({});
    
    if (type === 'edit' && cours) {
      setCurrentCours(cours);
      setFormData({
        matiere: cours.matiere.toString(),
        professeur: cours.professeur.toString(),
        classe: cours.classe.toString(),
        jour: cours.jour,
        heure_debut: cours.heure_debut,
        heure_fin: cours.heure_fin,
        salle: cours.salle,
        description: cours.description || ''
      });
    } else {
      // Réinitialiser le formulaire pour la création
      setCurrentCours(null);
      setFormData({
        matiere: '',
        professeur: '',
        classe: viewMode === 'classe' ? selectedEntity : '',
        jour: 'Lundi',
        heure_debut: '08:00:00',
        heure_fin: '09:00:00',
        salle: '',
        description: ''
      });
    }
    
    setOpenForm(true);
  };

  const handleCloseForm = () => {
    setOpenForm(false);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    
    // Mise à jour de l'état du formulaire
    const updatedFormData = {
      ...formData,
      [name]: value
    };
    
    // Si la matière change, sélectionner automatiquement le professeur associé
    if (name === 'matiere' && value) {
      const matiereSelectionnee = matieres.find(m => m.id.toString() === value);
      if (matiereSelectionnee && matiereSelectionnee.professeur) {
        // Mettre à jour le professeur automatiquement
        updatedFormData.professeur = matiereSelectionnee.professeur.toString();
        console.log(`Matière ${matiereSelectionnee.nom} sélectionnée, professeur associé: ${matiereSelectionnee.professeur}`);
      }
    }
    
    // Validation spéciale pour l'heure de fin
    if (name === 'heure_fin' && formData.heure_debut && value <= formData.heure_debut) {
      setFormErrors({
        ...formErrors,
        heure_fin: "L'heure de fin doit être postérieure à l'heure de début"
      });
    } else if (name === 'heure_fin') {
      setFormErrors({
        ...formErrors,
        heure_fin: ''
      });
    }
    
    // Appliquer les modifications
    setFormData(updatedFormData);
    
    // Effacer l'erreur lorsque l'utilisateur corrige le champ
    if (formErrors[name]) {
      setFormErrors({
        ...formErrors,
        [name]: ''
      });
    }
  };

  const validateForm = () => {
    const errors = {};
    
    if (!formData.matiere) errors.matiere = 'La matière est requise';
    if (!formData.professeur) errors.professeur = 'Le professeur est requis';
    if (!formData.classe) errors.classe = 'La classe est requise';
    if (!formData.jour) errors.jour = 'Le jour est requis';
    if (!formData.heure_debut) errors.heure_debut = "L'heure de début est requise";
    if (!formData.heure_fin) errors.heure_fin = "L'heure de fin est requise";
    if (formData.heure_debut >= formData.heure_fin) {
      errors.heure_fin = "L'heure de fin doit être postérieure à l'heure de début";
    }
    if (!formData.salle) errors.salle = 'La salle est requise';
    
    // Vérifier les conflits d'emploi du temps
    const conflits = checkTimeConflicts();
    if (conflits.length > 0) {
      errors.conflit = `Conflit d'horaire avec: ${conflits.map(c => c.matiere_nom).join(', ')}`;
    }
    
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const checkTimeConflicts = () => {
    // Vérifier les conflits d'horaires (même heure, même jour)
    const conflits = [];
    
    // Ne pas vérifier les conflits avec le cours actuel en mode édition
    const coursId = formType === 'edit' && currentCours ? currentCours.id : null;
    
    for (const c of cours) {
      if (coursId && c.id === coursId) continue;
      
      if (c.jour === formData.jour) {
        // Conflit si les plages horaires se chevauchent
        const debut = formData.heure_debut;
        const fin = formData.heure_fin;
        const cDebut = c.heure_debut;
        const cFin = c.heure_fin;
        
        if (
          (debut >= cDebut && debut < cFin) || // Le début est pendant un autre cours
          (fin > cDebut && fin <= cFin) || // La fin est pendant un autre cours
          (debut <= cDebut && fin >= cFin) // L'autre cours est entièrement inclus
        ) {
          // Vérifier si c'est pour la même classe ou le même professeur
          if (
            (c.classe.toString() === formData.classe) || 
            (c.professeur.toString() === formData.professeur)
          ) {
            conflits.push(c);
          }
        }
      }
    }
    
    return conflits;
  };

  const handleSubmitForm = async () => {
    if (!validateForm()) return;
    
    try {
      // Désactiver le bouton pendant le traitement
      setSubmitting(true);
      
      // Préparer les données (mais ne pas les envoyer à l'API)
      // S'assurer que tous les champs ont le bon format
      const courseData = {
        ...formData,
        matiere: parseInt(formData.matiere, 10),
        professeur: parseInt(formData.professeur, 10),
        classe: parseInt(formData.classe, 10),
        // S'assurer que les heures ont le bon format (HH:MM:SS)
        heure_debut: formData.heure_debut.length === 5 ? `${formData.heure_debut}:00` : formData.heure_debut,
        heure_fin: formData.heure_fin.length === 5 ? `${formData.heure_fin}:00` : formData.heure_fin,
      };
      
      // S'assurer que les valeurs sont du bon type pour la comparaison avec selectedEntity
      const courseClasseId = String(courseData.classe);
      const courseProfesseurId = String(courseData.professeur);
      
      console.log('Types de données - selectedEntity:', typeof selectedEntity);
      console.log('Types de données - classe cours:', typeof courseClasseId);
      console.log('Types de données - professeur cours:', typeof courseProfesseurId);
      
      console.log('Données formatées:', courseData);
      
      // Récupérer les informations détaillées des entités liées
      // D'abord depuis les états locaux, puis depuis localStorage si nécessaire
      let matiereDetails = matieres.find(m => m.id === courseData.matiere);
      let professeurDetails = professeurs.find(p => p.id === courseData.professeur);
      let classeDetails = classes.find(c => c.id === courseData.classe);
      
      // Si on ne trouve pas dans les états locaux, chercher dans localStorage
      if (!matiereDetails) {
        const localMatieres = loadMatieresFromLocalStorage() || [];
        matiereDetails = localMatieres.find(m => m.id === courseData.matiere);
      }
      
      if (!professeurDetails) {
        const localProfesseurs = loadProfesseursFromLocalStorage() || [];
        professeurDetails = localProfesseurs.find(p => p.id === courseData.professeur);
      }
      
      // Extraire les noms
      const matiere_nom = matiereDetails ? matiereDetails.nom : 'Matière inconnue';
      const professeur_nom = professeurDetails ? `${professeurDetails.prenom} ${professeurDetails.nom}` : 'Professeur inconnu';
      const classe_nom = classeDetails ? classeDetails.nom : 'Classe inconnue';
      
      if (formType === 'add') {
        // Créer un nouvel ID unique pour le mode local
        const newId = Date.now();
        const newCourse = {
          ...courseData,
          id: newId,
          // Ajouter des champs calculés pour l'affichage
          matiere_nom,
          professeur_nom,
          classe_nom,
        };
        
        console.log('Nouveau cours à ajouter en mode local:', newCourse);
        console.log('Mode de vue actuel:', viewMode);
        console.log('Entité sélectionnée actuelle:', selectedEntity);
        
        // Pour garantir que le cours sera visible, forcer le mode de vue et l'entité sélectionnée
        // à correspondre au cours ajouté
        if (viewMode === 'classe') {
          // En mode classe, on s'assure que la classe du cours est sélectionnée
          if (selectedEntity !== String(newCourse.classe)) {
            console.log('Mise à jour de l\'entité sélectionnée pour afficher le nouveau cours');
            setSelectedEntity(String(newCourse.classe));
          }
        } else {
          // En mode professeur, on s'assure que le professeur du cours est sélectionné
          if (selectedEntity !== String(newCourse.professeur)) {
            console.log('Mise à jour de l\'entité sélectionnée pour afficher le nouveau cours');
            setSelectedEntity(String(newCourse.professeur));
          }
        }
        
        // Ajouter le cours à l'état local
        setCours(currentCours => {
          // S'assurer que currentCours est un tableau
          const currentArray = Array.isArray(currentCours) ? currentCours : [];
          const newList = [...currentArray, newCourse];
          console.log('Nouvelle liste de cours après ajout:', newList);
          
          // Enregistrer la liste des cours dans le localStorage pour persistance
          try {
            saveCoursToLocalStorage(newList);
          } catch (e) {
            console.error('Erreur lors de la sauvegarde dans localStorage:', e);
          }
          
          return newList;
        });
        
        // Attendre que l'état soit mis à jour avant de forcer le rafraîchissement
        setTimeout(() => {
          setForceUpdate(prev => prev + 1);
          console.log('Rafraîchissement forcé après ajout.');
        }, 300);
        
        showSnackbar('Cours ajouté avec succès', 'success');
      } else if (formType === 'edit' && currentCours) {
        // Mettre à jour le cours existant
        const updatedCourse = {
          ...currentCours,
          ...courseData,
          id: currentCours.id,
          // Mettre à jour les champs calculés
          matiere_nom,
          professeur_nom,
          classe_nom,
        };
        
        console.log('Cours mis à jour:', updatedCourse);
        
        // Vérifier que cours est un tableau
        if (!Array.isArray(cours)) {
          console.error('Erreur: cours n\'est pas un tableau');
          throw new Error('Les cours ne sont pas dans un format valide');
        }
        
        // Mise à jour locale sans API
        const updatedCours = cours.map(c => 
          c.id === currentCours.id ? updatedCourse : c
        );
        
        // Sauvegarder dans localStorage
        try {
          saveCoursToLocalStorage(updatedCours);
          console.log('Cours mis à jour dans localStorage après modification');
        } catch (e) {
          console.error('Erreur lors de la sauvegarde dans localStorage:', e);
        }
        
        setCours(updatedCours);
        
        // Forcer le rafraîchissement du calendrier
        setForceUpdate(prev => prev + 1);
        
        showSnackbar('Cours mis à jour avec succès', 'success');
      }
      
      // Fermer le formulaire après ajout/modification
      handleCloseForm();
    } catch (error) {
      console.error('Erreur lors de la simulation:', error);
      showSnackbar(`Erreur: ${error.message}`, 'error');
    }
  };

  const handleDeleteClick = (cours) => {
    setCoursToDelete(cours);
    setOpenConfirm(true);
  };

  const handleConfirmDelete = async () => {
    if (!coursToDelete) return;
    
    try {
      // Vérifier que cours est bien un tableau avant d'appliquer filter
      if (!Array.isArray(cours)) {
        console.error('Erreur: cours n\'est pas un tableau');
        throw new Error('Les cours ne sont pas dans un format valide');
      }
      
      // Simuler un délai de traitement
      await new Promise(resolve => setTimeout(resolve, 500));
      
      console.log('Suppression locale du cours:', coursToDelete);
      
      // MODE SIMULATION: suppression locale uniquement
      const updatedCours = cours.filter(c => c.id !== coursToDelete.id);
      
      // Enregistrer la liste mise à jour dans localStorage
      try {
        localStorage.setItem('saved_courses', JSON.stringify(updatedCours));
        console.log('Cours mis à jour dans localStorage après suppression');
      } catch (e) {
        console.error('Erreur lors de la sauvegarde dans localStorage:', e);
      }
      
      setCours(updatedCours);
      showSnackbar('Cours supprimé avec succès', 'success');
    } catch (error) {
      console.error('Erreur lors de la suppression:', error);
      showSnackbar('Erreur lors de la suppression: ' + (error.message || 'Erreur inconnue'), 'error');
    } finally {
      setOpenConfirm(false);
      setCoursToDelete(null);
    }
  };

  const handleCancelDelete = () => {
    setOpenConfirm(false);
    setCoursToDelete(null);
  };

  const showSnackbar = (message, severity) => {
    setSnackbar({
      open: true,
      message,
      severity
    });
  };

  const handleCloseSnackbar = () => {
    setSnackbar({
      ...snackbar,
      open: false
    });
  };

  const handleTabChange = (event, newValue) => {
    setSelectedTab(newValue);
    setViewMode(newValue === 0 ? 'classe' : 'professeur');
    // Réinitialiser la sélection
    if (newValue === 0 && classes.length > 0) {
      setSelectedEntity(classes[0].id.toString());
    } else if (newValue === 1 && professeurs.length > 0) {
      setSelectedEntity(professeurs[0].id.toString());
    } else {
      setSelectedEntity('');
    }
  };

  const handleEntityChange = (event) => {
    console.log('Changement d\'entité sélectionnée de', selectedEntity, 'à', event.target.value);
    setSelectedEntity(event.target.value);
  };

  // Filtrer les cours selon le mode de vue et l'entité sélectionnée
  console.log('Mode de vue:', viewMode);
  console.log('Entité sélectionnée:', selectedEntity);
  console.log('Tous les cours disponibles:', cours);
  
  // S'assurer que cours est un tableau avant d'appliquer filter
  const filteredCours = Array.isArray(cours) ? cours.filter(c => {
    // Vérifier si l'objet cours est valide
    if (!c || (typeof c !== 'object')) {
      console.error('Cours invalide:', c);
      return false;
    }
    
    // S'assurer que classe et professeur sont toujours convertis en string pour la comparaison
    const classeId = c.classe?.toString ? c.classe.toString() : String(c.classe || '');
    const professeurId = c.professeur?.toString ? c.professeur.toString() : String(c.professeur || '');
    
    console.log(`Comparaison du cours ${c.id}: classe=${classeId}, professeur=${professeurId}, contre selectedEntity=${selectedEntity}`);
    
    const match = viewMode === 'classe' 
      ? classeId === selectedEntity
      : professeurId === selectedEntity;
    
    if (match) {
      console.log('MATCH: Cours correspondant trouvé:', c);
    }
    
    return match;
  }) : [];  // Retourner un tableau vide si cours n'est pas un tableau
  
  console.log(`Cours filtrés: ${filteredCours.length} sur ${Array.isArray(cours) ? cours.length : 0}`, filteredCours);

  // Utiliser notre nouveau composant de calendrier
  const renderTimetable = () => {
    // Enrichir les cours avec les noms pour l'affichage
    const coursEnrichi = cours.map(c => ({
      ...c,
      matiere_nom: c.matiere_nom || getMatiereNom(c.matiere),
      professeur_nom: c.professeur_nom || getProfesseurNom(c.professeur),
      classe_nom: c.classe_nom || getClasseNom(c.classe)
    }));
    
    return (
      <CalendarSchedule 
        cours={coursEnrichi}
        onEdit={(c) => handleOpenForm('edit', c)}
        onDelete={handleDeleteClick}
        viewMode={viewMode}
        classes={classes}
        professeurs={professeurs}
        selectedEntity={selectedEntity}
      />
    );
  };

  // Fonction utilitaires pour récupérer les noms à partir des IDs
  const getMatiereNom = (id) => {
    const matiere = matieres.find(m => m.id === id);
    return matiere ? matiere.nom : `Matière #${id}`;
  };

  const getProfesseurNom = (id) => {
    const prof = professeurs.find(p => p.id === id);
    return prof ? `${prof.prenom} ${prof.nom}` : `Professeur #${id}`;
  };

  const getClasseNom = (id) => {
    const classe = classes.find(c => c.id === id);
    return classe ? classe.nom : `Classe #${id}`;
  };

  return (
    <Box sx={{ p: 2 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4" gutterBottom sx={{ mb: 0 }}>
          Gestion des emplois du temps
        </Typography>
        <Button 
          variant="contained" 
          color="primary" 
          startIcon={<AddIcon />}
          onClick={() => handleOpenForm('add')}
        >
          Ajouter un cours
        </Button>
      </Box>
      
      <Tabs value={selectedTab} onChange={handleTabChange} sx={{ mb: 2 }}>
        <Tab label="Vue par classe" />
        <Tab label="Vue par professeur" />
      </Tabs>
      
      <Box sx={{ mb: 3 }}>
        <FormControl fullWidth>
          <InputLabel id="entity-select-label">
            {viewMode === 'classe' ? 'Sélectionner une classe' : 'Sélectionner un professeur'}
          </InputLabel>
          <Select
            labelId="entity-select-label"
            value={selectedEntity}
            label={viewMode === 'classe' ? 'Sélectionner une classe' : 'Sélectionner un professeur'}
            onChange={handleEntityChange}
          >
            {viewMode === 'classe' ? (
              classes.map(classe => (
                <MenuItem key={classe.id} value={classe.id.toString()}>
                  {classe.nom} ({classe.niveau})
                </MenuItem>
              ))
            ) : (
              professeurs.map(prof => (
                <MenuItem key={prof.id} value={prof.id.toString()}>
                  {prof.prenom} {prof.nom} ({prof.specialite})
                </MenuItem>
              ))
            )}
          </Select>
        </FormControl>
      </Box>
      
      {loading ? (
        <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
          <CircularProgress />
        </Box>
      ) : (
        renderTimetable()
      )}
      
      {/* Formulaire d'ajout/modification */}
      <Dialog open={openForm} onClose={handleCloseForm} maxWidth="md" fullWidth>
        <DialogTitle>
          {formType === 'add' ? 'Ajouter un cours' : 'Modifier un cours'}
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12} md={6}>
              <FormControl fullWidth error={Boolean(formErrors.matiere)}>
                <InputLabel id="matiere-label">Matière</InputLabel>
                <Select
                  labelId="matiere-label"
                  name="matiere"
                  value={formData.matiere}
                  onChange={handleInputChange}
                  label="Matière"
                >
                  {matieres.map(matiere => (
                    <MenuItem key={matiere.id} value={matiere.id.toString()}>
                      {matiere.nom}
                    </MenuItem>
                  ))}
                </Select>
                {formErrors.matiere && <Typography color="error" variant="caption">{formErrors.matiere}</Typography>}
              </FormControl>
            </Grid>
            <Grid item xs={12} md={6}>
              <FormControl fullWidth error={Boolean(formErrors.professeur)}>
                <InputLabel id="professeur-label">Professeur</InputLabel>
                <Select
                  labelId="professeur-label"
                  name="professeur"
                  value={formData.professeur}
                  onChange={handleInputChange}
                  label="Professeur"
                  disabled={formData.matiere !== ''} // Désactiver si une matière est sélectionnée
                >
                  {professeurs.map(prof => (
                    <MenuItem key={prof.id} value={prof.id.toString()}>
                      {prof.prenom} {prof.nom} ({prof.specialite})
                    </MenuItem>
                  ))}
                </Select>
                {formErrors.professeur && <Typography color="error" variant="caption">{formErrors.professeur}</Typography>}
                {formData.matiere !== '' && (
                  <Typography variant="caption" color="text.secondary" sx={{ mt: 1 }}>
                    Le professeur est automatiquement sélectionné en fonction de la matière
                  </Typography>
                )}
              </FormControl>
            </Grid>
            <Grid item xs={12} md={6}>
              <FormControl fullWidth error={Boolean(formErrors.classe)}>
                <InputLabel id="classe-label">Classe</InputLabel>
                <Select
                  labelId="classe-label"
                  name="classe"
                  value={formData.classe}
                  onChange={handleInputChange}
                  label="Classe"
                >
                  {classes.map(classe => (
                    <MenuItem key={classe.id} value={classe.id.toString()}>
                      {classe.nom} ({classe.niveau})
                    </MenuItem>
                  ))}
                </Select>
                {formErrors.classe && <Typography color="error" variant="caption">{formErrors.classe}</Typography>}
              </FormControl>
            </Grid>
            <Grid item xs={12} md={6}>
              <FormControl fullWidth error={Boolean(formErrors.jour)}>
                <InputLabel id="jour-label">Jour</InputLabel>
                <Select
                  labelId="jour-label"
                  name="jour"
                  value={formData.jour}
                  onChange={handleInputChange}
                  label="Jour"
                >
                  {JOURS.map(jour => (
                    <MenuItem key={jour} value={jour}>
                      {jour}
                    </MenuItem>
                  ))}
                </Select>
                {formErrors.jour && <Typography color="error" variant="caption">{formErrors.jour}</Typography>}
              </FormControl>
            </Grid>
            <Grid item xs={12} md={6}>
              <FormControl fullWidth error={Boolean(formErrors.heure_debut)}>
                <InputLabel id="heure-debut-label">Heure de début</InputLabel>
                <Select
                  labelId="heure-debut-label"
                  name="heure_debut"
                  value={formData.heure_debut}
                  onChange={handleInputChange}
                  label="Heure de début"
                >
                  {HEURES.map(heure => (
                    <MenuItem key={`debut-${heure.value}`} value={heure.value}>
                      {heure.label}
                    </MenuItem>
                  ))}
                </Select>
                {formErrors.heure_debut && <Typography color="error" variant="caption">{formErrors.heure_debut}</Typography>}
              </FormControl>
            </Grid>
            <Grid item xs={12} md={6}>
              <FormControl fullWidth error={Boolean(formErrors.heure_fin)}>
                <InputLabel id="heure-fin-label">Heure de fin</InputLabel>
                <Select
                  labelId="heure-fin-label"
                  name="heure_fin"
                  value={formData.heure_fin}
                  onChange={handleInputChange}
                  label="Heure de fin"
                >
                  {HEURES.map((heure, index) => (
                    <MenuItem 
                      key={`fin-${heure.value}`} 
                      value={index < HEURES.length - 1 ? HEURES[index + 1].value : '19:00:00'}
                      disabled={heure.value <= formData.heure_debut}
                    >
                      {index < HEURES.length - 1 ? HEURES[index + 1].label : '19:00'}
                    </MenuItem>
                  ))}
                </Select>
                {formErrors.heure_fin && <Typography color="error" variant="caption">{formErrors.heure_fin}</Typography>}
              </FormControl>
            </Grid>
            <Grid item xs={12}>
              <TextField
                name="salle"
                label="Salle"
                value={formData.salle}
                onChange={handleInputChange}
                fullWidth
                required
                error={Boolean(formErrors.salle)}
                helperText={formErrors.salle}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                name="description"
                label="Description (optionnel)"
                value={formData.description}
                onChange={handleInputChange}
                fullWidth
                multiline
                rows={2}
              />
            </Grid>
            {formErrors.conflit && (
              <Grid item xs={12}>
                <Alert severity="error">
                  {formErrors.conflit}
                </Alert>
              </Grid>
            )}
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseForm}>Annuler</Button>
          <Button onClick={handleSubmitForm} variant="contained" color="primary">
            {formType === 'add' ? 'Ajouter' : 'Modifier'}
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Boîte de dialogue de confirmation de suppression */}
      <Dialog open={openConfirm} onClose={handleCancelDelete}>
        <DialogTitle>Confirmer la suppression</DialogTitle>
        <DialogContent>
          <Typography>
            Êtes-vous sûr de vouloir supprimer ce cours ?
            Cette action est irréversible.
          </Typography>
          {coursToDelete && (
            <Box sx={{ mt: 2 }}>
              <Typography variant="subtitle2">
                {getMatiereNom(coursToDelete.matiere)}
              </Typography>
              <Typography variant="body2">
                {getProfesseurNom(coursToDelete.professeur)} - {getClasseNom(coursToDelete.classe)}
              </Typography>
              <Typography variant="body2">
                {coursToDelete.jour}, {coursToDelete.heure_debut.substr(0, 5)} - {coursToDelete.heure_fin.substr(0, 5)}, Salle: {coursToDelete.salle}
              </Typography>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCancelDelete}>Annuler</Button>
          <Button onClick={handleConfirmDelete} color="error" variant="contained">
            Supprimer
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Snackbar pour les notifications */}
      <Snackbar 
        open={snackbar.open} 
        autoHideDuration={6000} 
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default AdminTimetable;
