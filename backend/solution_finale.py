import os
import django
import sys
import time

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from django.db import connection, transaction
from base.models import Classe, Matiere, Professeur, Etudiant
from django.core.management import call_command

def solution_definitive():
    """
    Solution d√©finitive pour le probl√®me de persistance des donn√©es.
    Cette solution est radicale et emp√™chera d√©finitivement la r√©initialisation
    des donn√©es apr√®s suppression.
    """
    print("\nüîí SOLUTION D√âFINITIVE AU PROBL√àME DE PERSISTANCE üîí")
    print("==================================================")
    
    with transaction.atomic():
        # 1. V√©rifier l'√©tat actuel des donn√©es
        nb_classes = Classe.objects.count()
        nb_matieres = Matiere.objects.count()
        nb_profs = Professeur.objects.count()
        nb_etudiants = Etudiant.objects.count()
        
        print(f"\n√âtat actuel des donn√©es:")
        print(f"- Classes: {nb_classes}")
        print(f"- Mati√®res: {nb_matieres}")
        print(f"- Professeurs: {nb_profs}")
        print(f"- √âtudiants: {nb_etudiants}")
        
        # 2. Cr√©er une table de verrouillage en base de donn√©es
        print("\n1Ô∏è‚É£ Cr√©ation d'un verrouillage permanent en base de donn√©es...")
        with connection.cursor() as cursor:
            # V√©rifier si la table existe d√©j√†
            cursor.execute("SHOW TABLES LIKE 'data_protection_lock'")
            if not cursor.fetchone():
                # Cr√©er la table
                cursor.execute("""
                    CREATE TABLE data_protection_lock (
                        id INT PRIMARY KEY,
                        entity_type VARCHAR(255),
                        is_locked BOOLEAN DEFAULT TRUE,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                    )
                """)
                
                # Ins√©rer les verrous pour chaque type d'entit√©
                cursor.execute("INSERT INTO data_protection_lock (id, entity_type, is_locked) VALUES (1, 'classe', TRUE)")
                cursor.execute("INSERT INTO data_protection_lock (id, entity_type, is_locked) VALUES (2, 'matiere', TRUE)")
                print("   ‚úÖ Verrous de base de donn√©es cr√©√©s avec succ√®s")
            else:
                # Mettre √† jour les verrous existants
                cursor.execute("UPDATE data_protection_lock SET is_locked = TRUE WHERE entity_type IN ('classe', 'matiere')")
                print("   ‚úÖ Verrous de base de donn√©es mis √† jour")
        
        # 3. Modifier le fichier init_data.py pour d√©sactiver compl√®tement la cr√©ation automatique
        print("\n2Ô∏è‚É£ Modification du fichier d'initialisation des donn√©es...")
        init_path = os.path.join(os.path.dirname(__file__), 'init_data.py')
        
        if os.path.exists(init_path):
            # Cr√©er une sauvegarde du fichier original
            backup_path = init_path + '.backup'
            if not os.path.exists(backup_path):
                with open(init_path, 'r', encoding='utf-8') as f_src:
                    with open(backup_path, 'w', encoding='utf-8') as f_dst:
                        f_dst.write(f_src.read())
                print("   ‚úÖ Sauvegarde du fichier original cr√©√©e")
            
            # Lire le contenu du fichier
            with open(init_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Modifier le fichier pour d√©sactiver compl√®tement la cr√©ation de classes et mati√®res
            if 'def create_test_data' in content:
                modified = content.replace(
                    'def create_test_data(force=True):',
                    'def create_test_data(force=True):\n    # SOLUTION D√âFINITIVE - CR√âATION D√âSACTIV√âE\n    print("‚õî Cr√©ation de donn√©es de test d√©sactiv√©e d√©finitivement")\n    # V√©rifier le verrouillage en base de donn√©es\n    with connection.cursor() as cursor:\n        cursor.execute("SELECT COUNT(*) FROM data_protection_lock WHERE entity_type IN (\'classe\', \'matiere\') AND is_locked = TRUE")\n        if cursor.fetchone()[0] > 0:\n            print("üîí Protection des donn√©es activ√©e - Aucune donn√©e de test ne sera cr√©√©e")\n            return'
                )
                
                # D√©sactiver l'appel automatique √† la fin du fichier
                if 'if __name__ == "__main__":' in modified:
                    modified = modified.replace(
                        'if __name__ == "__main__":',
                        'if __name__ == "__main__": # D√âSACTIV√â\n    print("‚ö†Ô∏è Ex√©cution automatique d√©sactiv√©e")'
                    )
                
                # √âcrire le fichier modifi√©
                with open(init_path, 'w', encoding='utf-8') as f:
                    f.write(modified)
                print("   ‚úÖ Fichier init_data.py modifi√© avec succ√®s")
        
        # 4. Cr√©er un signal de post_migrate pour emp√™cher la cr√©ation automatique
        print("\n3Ô∏è‚É£ Cr√©ation d'un signal pour bloquer la cr√©ation automatique...")
        signals_path = os.path.join(os.path.dirname(__file__), 'base', 'signals.py')
        
        # Contenu du fichier signals.py
        signals_content = """from django.db.models.signals import post_migrate
from django.dispatch import receiver
from django.db import connection

@receiver(post_migrate)
def prevent_test_data_creation(sender, **kwargs):
    \"\"\"
    Signal qui s'ex√©cute apr√®s chaque migration pour s'assurer que
    les donn√©es de test ne sont pas recr√©√©es automatiquement.
    \"\"\"
    # V√©rifier si la table de verrouillage existe
    with connection.cursor() as cursor:
        cursor.execute("SHOW TABLES LIKE 'data_protection_lock'")
        if cursor.fetchone():
            # Mettre √† jour les verrous
            cursor.execute("UPDATE data_protection_lock SET is_locked = TRUE WHERE entity_type IN ('classe', 'matiere')")
            print("üîí Protection des donn√©es activ√©e - Les donn√©es ne seront pas r√©initialis√©es")
"""
        
        # √âcrire le fichier signals.py
        with open(signals_path, 'w', encoding='utf-8') as f:
            f.write(signals_content)
        print("   ‚úÖ Fichier signals.py cr√©√© avec succ√®s")
        
        # 5. Modifier apps.py pour activer les signaux
        apps_path = os.path.join(os.path.dirname(__file__), 'base', 'apps.py')
        
        if os.path.exists(apps_path):
            with open(apps_path, 'r', encoding='utf-8') as f:
                apps_content = f.read()
            
            if 'import_signals' not in apps_content:
                # Ajouter l'import des signaux dans la m√©thode ready
                if 'class BaseConfig' in apps_content and 'ready' not in apps_content:
                    modified_apps = apps_content.replace(
                        'class BaseConfig(AppConfig):',
                        'class BaseConfig(AppConfig):\n    def ready(self):\n        # Import signals\n        import base.signals'
                    )
                elif 'class BaseConfig' in apps_content and 'ready' in apps_content:
                    modified_apps = apps_content.replace(
                        'def ready(self):',
                        'def ready(self):\n        # Import signals\n        import base.signals'
                    )
                else:
                    modified_apps = apps_content
                
                with open(apps_path, 'w', encoding='utf-8') as f:
                    f.write(modified_apps)
                print("   ‚úÖ Fichier apps.py modifi√© avec succ√®s")
        
        # 6. Cr√©er un middleware pour v√©rifier le verrouillage √† chaque requ√™te
        print("\n4Ô∏è‚É£ Cr√©ation d'un middleware de protection...")
        middleware_path = os.path.join(os.path.dirname(__file__), 'base', 'middleware.py')
        
        middleware_content = """from django.db import connection

class DataProtectionMiddleware:
    \"\"\"
    Middleware qui v√©rifie le verrouillage des donn√©es √† chaque requ√™te.
    \"\"\"
    def __init__(self, get_response):
        self.get_response = get_response
    
    def __call__(self, request):
        # V√©rifier si la table de verrouillage existe
        with connection.cursor() as cursor:
            cursor.execute("SHOW TABLES LIKE 'data_protection_lock'")
            if cursor.fetchone():
                # S'assurer que les verrous sont actifs
                cursor.execute("UPDATE data_protection_lock SET is_locked = TRUE WHERE entity_type IN ('classe', 'matiere')")
        
        response = self.get_response(request)
        return response
"""
        
        with open(middleware_path, 'w', encoding='utf-8') as f:
            f.write(middleware_content)
        print("   ‚úÖ Fichier middleware.py cr√©√© avec succ√®s")
        
        # 7. Ajouter le middleware √† settings.py
        settings_path = os.path.join(os.path.dirname(__file__), 'backend', 'settings.py')
        
        if os.path.exists(settings_path):
            with open(settings_path, 'r', encoding='utf-8') as f:
                settings_content = f.read()
            
            if 'DataProtectionMiddleware' not in settings_content:
                # Ajouter le middleware √† la liste des middlewares
                middleware_section = 'MIDDLEWARE = ['
                if middleware_section in settings_content:
                    middleware_list = settings_content.split(middleware_section)[1].split(']')[0]
                    new_middleware = f"{middleware_section}{middleware_list},\n    'base.middleware.DataProtectionMiddleware',\n]"
                    modified_settings = settings_content.replace(f"{middleware_section}{middleware_list}]", new_middleware)
                    
                    with open(settings_path, 'w', encoding='utf-8') as f:
                        f.write(modified_settings)
                    print("   ‚úÖ Middleware ajout√© √† settings.py avec succ√®s")
    
    print("\n‚úÖ SOLUTION D√âFINITIVE APPLIQU√âE AVEC SUCC√àS")
    print("‚úÖ Vos donn√©es sont maintenant prot√©g√©es contre toute r√©initialisation")
    print("‚úÖ Vous pouvez cr√©er, modifier et supprimer vos donn√©es sans craindre de les perdre")
    print("\n‚ö†Ô∏è IMPORTANT: Red√©marrez le serveur Django pour activer toutes les protections")

if __name__ == "__main__":
    solution_definitive()
