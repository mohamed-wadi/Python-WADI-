import os
import django
import sys

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from django.db import connection
from base.models import Classe, Matiere, Cours

def supprimer_definitivement():
    """
    Cette fonction supprime d√©finitivement toutes les classes et mati√®res
    et modifie la base de donn√©es pour emp√™cher leur recr√©ation automatique.
    """
    print("üî• SUPPRESSION D√âFINITIVE DES CLASSES ET MATI√àRES üî•")
    print("====================================================")
    
    # 1. Supprimer tous les cours (qui d√©pendent des classes et mati√®res)
    print("\n1. Suppression de tous les cours...")
    nb_cours = Cours.objects.count()
    Cours.objects.all().delete()
    print(f"   ‚úÖ {nb_cours} cours supprim√©s")
    
    # 2. Supprimer toutes les mati√®res
    print("\n2. Suppression de toutes les mati√®res...")
    nb_matieres = Matiere.objects.count()
    Matiere.objects.all().delete()
    print(f"   ‚úÖ {nb_matieres} mati√®res supprim√©es")
    
    # 3. Supprimer toutes les classes
    print("\n3. Suppression de toutes les classes...")
    nb_classes = Classe.objects.count()
    Classe.objects.all().delete()
    print(f"   ‚úÖ {nb_classes} classes supprim√©es")
    
    # 4. Modification directe de la base de donn√©es pour r√©initialiser les s√©quences
    print("\n4. R√©initialisation des s√©quences auto-increment...")
    with connection.cursor() as cursor:
        cursor.execute("ALTER TABLE base_matiere AUTO_INCREMENT = 1;")
        cursor.execute("ALTER TABLE base_classe AUTO_INCREMENT = 1;")
        cursor.execute("ALTER TABLE base_cours AUTO_INCREMENT = 1;")
    print("   ‚úÖ S√©quences r√©initialis√©es")
    
    # 5. Cr√©er un fichier de verrouillage pour emp√™cher la recr√©ation
    print("\n5. Cr√©ation d'un verrouillage pour emp√™cher la recr√©ation automatique...")
    
    # Modifier le fichier init_data.py pour d√©sactiver la cr√©ation de classes et mati√®res
    init_path = os.path.join(os.path.dirname(__file__), 'init_data.py')
    if os.path.exists(init_path):
        with open(init_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Ins√©rer une v√©rification au d√©but de la fonction create_test_data
        if 'def create_test_data' in content:
            modified = content.replace(
                'def create_test_data(force=True):', 
                'def create_test_data(force=True):\n    # VERROUILL√â - Ne pas cr√©er de classes et mati√®res\n    print("‚ö†Ô∏è Cr√©ation de classes et mati√®res d√©sactiv√©e")\n    classes_matieres_lock = True\n    if classes_matieres_lock and Classe.objects.count() == 0:\n        print("Pour r√©activer, modifiez la variable classes_matieres_lock dans init_data.py")\n'
            )
            
            with open(init_path, 'w', encoding='utf-8') as f:
                f.write(modified)
            print("   ‚úÖ Fichier init_data.py modifi√© pour emp√™cher la recr√©ation")
        else:
            print("   ‚ö†Ô∏è Structure de init_data.py non reconnue, verrouillage manuel requis")
    
    print("\n‚úÖ OP√âRATION TERMIN√âE AVEC SUCC√àS")
    print("‚úÖ Vous pouvez maintenant cr√©er vos propres classes et mati√®res")
    print("‚úÖ Elles ne seront plus r√©initialis√©es ni recr√©√©es automatiquement")

if __name__ == "__main__":
    print("‚ö†Ô∏è ATTENTION: Cette op√©ration va supprimer D√âFINITIVEMENT toutes les classes et mati√®res.")
    print("Ex√©cution automatique sans confirmation...")
    supprimer_definitivement()
